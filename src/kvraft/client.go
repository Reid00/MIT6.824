package kvraft

import (
	"crypto/rand"
	"math/big"

	"6.824/labrpc"
)

type Clerk struct {
	servers []*labrpc.ClientEnd
	// You will have to modify this struct.
	leaderId int64
	// generated by nrand(), it would be better to use some distributed ID
	// generation algorithm that guarantees no conflicts
	clientId  int64
	commandId int64 // (clientId, commandId) defines a operation uniquely
}

func nrand() int64 {
	max := big.NewInt(int64(1) << 62)
	bigx, _ := rand.Int(rand.Reader, max)
	x := bigx.Int64()
	return x
}

func MakeClerk(servers []*labrpc.ClientEnd) *Clerk {
	return &Clerk{
		servers:   servers,
		leaderId:  0,
		clientId:  nrand(),
		commandId: 0,
	}
}

// fetch the current value for a key.
// returns "" if the key does not exist.
// keeps trying forever in the face of all other errors.
//
// you can send an RPC with code like this:
// ok := ck.servers[i].Call("KVServer.Get", &args, &reply)
//
// the types of args and reply (including whether they are pointers)
// must match the declared types of the RPC handler function's
// arguments. and reply must be passed as a pointer.
func (ck *Clerk) Get(key string) string {

	// You will have to modify this function.
	return ck.Command(&CommandRequest{
		Key:       key,
		Op:        OpGet,
		ClientId:  ck.clientId,
		CommandId: ck.commandId,
	})
}

func (ck *Clerk) Put(key string, value string) {
	ck.Command(&CommandRequest{
		Key:       key,
		Value:     value,
		Op:        OpPut,
		ClientId:  ck.clientId,
		CommandId: ck.commandId,
	})
}
func (ck *Clerk) Append(key string, value string) {
	ck.Command(&CommandRequest{
		Key:       key,
		Value:     value,
		Op:        OpAppend,
		ClientId:  ck.clientId,
		CommandId: ck.commandId,
	})
}

func (ck *Clerk) Command(req *CommandRequest) string {
	// req.ClientId, req.CommandId = ck.clientId, ck.commandId
	for {
		var resp CommandResponse
		if !ck.servers[ck.leaderId].Call("KVServer.Command", req, &resp) ||
			resp.Err == ErrWrongLeader || resp.Err == ErrTimeout {

			// 不知leader 轮询所有的server 尝试发出请求
			ck.leaderId = (ck.leaderId + 1) % int64(len(ck.servers))
			continue
		}

		ck.commandId++
		return resp.Value
	}
}
